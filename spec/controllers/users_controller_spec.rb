require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do
  context 'Internal User' do
    let(:authorised) { create(:user) }

    # This should return the minimal set of attributes required to create a valid
    # User. As you add validations to User, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) { attributes_for(:user) }

    let(:invalid_attributes) { { email: 'not an email address', password: 'test' } }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # UsersController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe 'GET #index' do
      before { sign_in authorised }
      it 'show a list of all users' do
        get :index
        expect(assigns[:users].size).to eq 1
      end
    end

    describe 'GET #show' do
      before { sign_in authorised }
      it 'assigns the requested user as @user' do
        user = User.create! valid_attributes
        get :show, id: user.to_param, session: valid_session
        expect(assigns(:user)).to eq(user)
      end
    end

    describe 'GET #new' do
      before { sign_in authorised }
      it 'assigns a new user as @user' do
        get :new, params: {}, session: valid_session
        expect(assigns(:user)).to be_a_new(User)
      end
    end

    describe 'GET #edit' do
      before do
        sign_in authorised
      end
      it 'assigns the requested user as @user' do
        user = User.create! valid_attributes
        get :edit, id: user.to_param, session: valid_session
        expect(assigns(:user)).to eq(user)
      end
    end

    describe 'POST #create' do
      before do
        sign_in authorised
      end
      context 'with valid params' do
        it 'creates a new User' do
          expect do
            post :create, user: attributes_for(:user), session: valid_session
          end.to change(User, :count).by(1)
        end
  
        it 'assigns a newly created user as @user' do
          post :create, user: valid_attributes, session: valid_session
          expect(assigns(:user)).to be_a(User)
        end
  
        it 'redirects to the created user' do
          post :create, user: valid_attributes, session: valid_session
          expect(response).to redirect_to(User.last)
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        before do
          sign_in authorised
        end
        let(:new_attributes) { attributes_for(:user) }
  
        it 'updates the requested user' do
          user = User.create! valid_attributes
          put :update, id: user.to_param, user: new_attributes, session: valid_session
          user.reload
          expect(assigns(:user)).to eq(user)
        end
  
        it 'assigns the requested user as @user' do
          user = User.create! valid_attributes
          put :update, id: user.to_param, user: valid_attributes, session: valid_session
          expect(assigns(:user)).to eq(user)
        end
  
        it 'redirects to the user' do
          user = User.create! valid_attributes
          put :update, id: user.to_param, user: valid_attributes, session: valid_session
          expect(response).to redirect_to(user)
        end
      end
  
      context 'with invalid params' do
        before do
          sign_in authorised
        end
        it 'assigns the user as @user' do
          user = User.create! valid_attributes
          put :update, { id: user.to_param, user: invalid_attributes }, session: valid_session
          expect(assigns(:user)).to eq(user)
        end
  
        it "re-renders the 'edit' template" do
          user = User.create! valid_attributes
          put :update, id: user.to_param, user: invalid_attributes, session: valid_session
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE #destroy' do
      before { sign_in authorised }
      it 'destroys the requested user' do
        user = User.create! valid_attributes
        expect do
          delete :destroy, id: user.to_param, session: valid_session
        end.to change(User, :count).by(-1)
      end
  
      it 'redirects to the users list' do
        user = User.create! valid_attributes
        delete :destroy, id: user.to_param, session: valid_session
        expect(response).to redirect_to(users_url)
      end
    end
  end
end
